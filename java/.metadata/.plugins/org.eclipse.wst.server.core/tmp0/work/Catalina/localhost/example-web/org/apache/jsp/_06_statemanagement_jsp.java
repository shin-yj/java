/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.35
 * Generated at: 2020-08-06 08:23:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLDecoder;
import java.net.URLEncoder;

public final class _06_statemanagement_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.net.URLDecoder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");

//방문 횟수를 저장하는 변수
int requestData = 1;
int cookieData = 1, sessionData = 1, applicationData = 1;

//0. Request Data
if (request.getAttribute("reqData") != null) {
	requestData = (int)request.getAttribute("reqData");
}
request.setAttribute("reqData", requestData + 1);

//1. Cookie
//요청객체로부터 브라우저가 전송한 쿠키 목록을 반환
Cookie[] cookies = request.getCookies();//요청 정보에 포함된 쿠키 데이터 반환 (처음 요청에는 없음)

if (cookies != null) {
	for (int i = 0; i < cookies.length; i++) {
		//이름이 cookiedata인 쿠키를 찾아서
		if (cookies[i].getName().equals("cookiedata")) {
			//쿠키의 값을 변수에 저장
			String data = cookies[i].getValue();//쿠키는 항상 문자열
			data = URLDecoder.decode(data, "utf-8");//비영문자 처리
			cookieData = Integer.parseInt(data);//문자열 -> 숫자
		}
	}
}

//이름이 cookiedata인 쿠키 객체 생성하고 값을 지정
String sData = String.format("%d", cookieData + 1);
String encoded = URLEncoder.encode(sData, "utf-8"); //비영문자 처리
Cookie cookie = 
	new Cookie("cookiedata", //쿠키의 이름
			   encoded); // 쿠키 이름에 저장한 데이터(값)

//만료시간을 지정하면 쿠키를 파일로 기록
//-> 브라우저를 종료하고 다시 실행해도 쿠키 값을 읽을 수 있습니다.
//cookie.setMaxAge(60 * 10); //10분 동안 쿠키 유지(쿠키를 파일에 기록)
//cookie.setMaxAge(0); //--> 쿠키 제거(유효기간 소멸)

response.addCookie(cookie);//응답 객체에 쿠키를 기록 --> 브라우저에 쿠기 저장

//2. Session
//세션에 값이 들어있다면 그 값을 읽어서 변수에 저장
if (session.getAttribute("sessiondata") != null) {
	//여기서 읽는 값은 이전 요청에서 기록한 데이터
	sessionData = (Integer)session.getAttribute("sessiondata");
}

//세션에 값을 저장
session.setAttribute("sessiondata", // 세션에 저장한 데이터의 이름 
		Integer.valueOf(sessionData + 1)); 


//3. Application (ServletContext)
// 수명주기 : 서버가 시작할 때 생성 - 서버 종료할 때 소멸
// 모든 브라우저가 공유하는 데이터 저장소 (모든 사용자가 공유, 이전의 쿠키 저장)

//getattribute로 읽어옴
if (application.getAttribute("applicationdata") != null) { // 애플리케이션에 저장되는 데이터
	applicationData = 
		(Integer)application.getAttribute("applicationdata");
}

application.setAttribute( //setattribute로 저장
	"applicationdata", Integer.valueOf(applicationData + 1));


      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<a href=\"06.statemanagement.jsp\">새로고침</a>\r\n");
      out.write("\t&nbsp;&nbsp;\r\n");
      out.write("\t<a href=\"06.statemanagement2.jsp\">이동</a>\r\n");
      out.write("\t<hr />\r\n");
      out.write("\tREQUEST DATA : ");
      out.print( requestData );
      out.write("<br />\r\n");
      out.write("\tCOOKIE DATA : ");
      out.print( cookieData );
      out.write("<br />\r\n");
      out.write("\tSESSION DATA : ");
      out.print( sessionData );
      out.write("<br />\r\n");
      out.write("\tAPPLICATION DATA : ");
      out.print( applicationData );
      out.write("<br />\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
